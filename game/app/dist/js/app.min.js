'use strict';

/**
 * @ngdoc overview
 * @name testApp
 * @description
 * # testApp
 *
 * Main module of the application.
 */
angular.module('app', []);

(function() {
    angular.module('game', [])
        .config(['$routeProvider', '$locationProvider', function($routeProvider, $locationProvider) {
            $routeProvider
                .when('/game', {
                    templateUrl: '/views/game.html',
                    controller: 'GameController',
                    controllerAs: 'game',
                    caseInsensitiveMatch: true
                });

            $locationProvider.html5Mode(true);
        }])
        .controller('GameController', ['$http', '$scope', '$routeParams', function($http, $scope, $routeParams) {
            //Custom Profile functionality
            $http.get('/api/userData')
                .success(function(data) {
                    $scope.user = data; //Expose the user data to your angular scope
                });
        }]);
})();

(function() {
    angular.module('login', [])
        .config(['$routeProvider', '$locationProvider', function($routeProvider, $locationProvider) {
            $routeProvider
                .when('/signup', {
                    templateUrl: '/views/signup.html',
                    controller: 'SignupController',
                    controllerAs: 'signup',
                    caseInsensitiveMatch: true
                })
                .when('/login', {
                    templateUrl: '/views/login.html',
                    controller: 'LoginController',
                    controllerAs: 'login',
                    caseInsensitiveMatch: true
                })
                .otherwise({
                    templateUrl: '/views/main.html',
                    controller: 'IndexController',
                    controllerAs: 'index'
                });

            $locationProvider.html5Mode(true); //Use html5Mode so your angular routes don't have #/route
        }])
        .controller('LoginController', ['$http', '$scope', function($http, $scope) {
            // Custom Login functionality
        }])
        .controller('IndexController', ['$http', '$scope', function($http, $scope) {
            // Custom Index functionality
        }])
        .controller('SignupController', ['$http', '$scope', function($http, $scope) {
            // Custom Signup functionality
        }])
        .controller('LoginForm', ['$http', '$scope', function($http, $scope) {
            $scope.login = function() {
                $http
                    .post('/login', {
                        username: this.username,
                        password: this.password
                    })
                    .success(function(data) {
                        console.log(data);
                    });
            }
        }])
        .controller('SignupForm', ['$http', '$scope', function($http, $scope) {
            $scope.signup = function() {
                $http
                    .post('/signup', {
                        username: this.username,
                        password: this.password
                    })
                    .success(function(data) {
                        console.log(data);
                    });
            }
        }])
})();

'use strict';

(function() {
    angular.module('app', ['ngRoute', 'login', 'profile', 'httpFactory', 'common-directives', 'ngLoadScript','angular-growl', 'game']);
})();

(function() {
    angular.module('profile', [])
        .config(['$routeProvider', '$locationProvider', function($routeProvider, $locationProvider) {
            $routeProvider
                .when('/profile', {
                    templateUrl: '/views/profile.html',
                    controller: 'ProfileController',
                    controllerAs: 'profile',
                    caseInsensitiveMatch: true
                });

            $locationProvider.html5Mode(true);
        }])
        .controller('ProfileController', ['$http', '$scope', '$routeParams', function($http, $scope, $routeParams) {
            //Custom Profile functionality
            $http.get('/api/userData')
                .success(function(data) {
                    $scope.user = data; //Expose the user data to your angular scope
                });
        }]);
})();

(function(){
    angular.module('common-directives', [])
        .directive('redir', ['$http', function($http) {
            return {
                restrict: 'A',
                link: function(scope, element, attrs) {
                    element.on('click', function(e) {
                        e.preventDefault();
                        window.location = attrs.href;
                    });
                }
            }
        }])
        .directive('logout', ['$http', function($http) {
            return {
                restrict: 'A',
                link: function(scope, element, attrs) {
                    element.on('click', function(e) {
                        e.preventDefault();
                        $http.post('/logout');
                    });
                }
            }
        }]);
})();


/*
 *  Angular LoadScript
 *
 *  Let angular load and execute lazy javascript from partials!
 *
 *  This module is the result of  this issue: "1.2.0rc1 regression: script tags not loaded via ngInclude"
 *  Issue url: https://github.com/angular/angular.js/issues/3756
 *
 *  As of Angular 1.2.0 the ngInclude scripts does not permit execution of javascript from included partials.
 *  This little module execute code inside script tags with "javascript-lazy" attribute after partial loading,
 *  thus re-enabling this feature.
 *
 *  ( please have a look at the issue comments, this angular feature was never planned nor included properly,
 *  was only a drawback of using jQuery for partial inclusion )
 *
 *  This angular module have been created by @endorama (https://github.com/endorama) based upon the code
 *  posted by @olostan (https://github.com/olostan)
 *
 *  Simply add this file, load ngLoadScript module as application dependency and use type="text/javascript-lazy"
 *  as type for script you which to load lazily in partials.
 *
 * License: 2013 - released to the Public Domain.
 */

/*global angular */
(function (ng) {
  'use strict';

  var app = ng.module('ngLoadScript', []);

  app.directive('script', function() {
    return {
      restrict: 'E',
      scope: false,
      link: function(scope, elem, attr)
      {
        if (attr.type==='text/javascript-lazy')
        {
          var s = document.createElement("script");
          s.type = "text/javascript";
          var src = elem.attr('src');
          if(src!==undefined)
          {
              s.src = src;
          }
          else
          {
              var code = elem.text();
              s.text = code;
          }
          document.head.appendChild(s);
          elem.remove();
        }
      }
    };
  });

}(angular));

/*
    Factory that listens to all responses from GET/POST and pre-processes it
    * If data.redirect is present, perform a redirect with angular (Hash redirect)
    * If data.error is present, display growl errors
*/
(function() {
    angular.module('httpFactory', [])
        .factory('myHttpResponseInterceptor',['$q','$location', 'growl',function($q,$location, growl){
            return {
                response: function(response) {
                    if (typeof response.data === 'object') {
                        if (response.data.redirect) {
                            $location.path(response.data.redirect);
                            return {} || $q.when(response);
                        } else if (response.data.error) {
                            growl.addErrorMessage(response.data.error);
                        }
                    }
                    return response || $q.when(response);
                }
            };
        }])
        .config(['$httpProvider', function($httpProvider) {
            $httpProvider.interceptors.push('myHttpResponseInterceptor');
        }]);
})();

//# sourceMappingURL=data:application/json;base64,
